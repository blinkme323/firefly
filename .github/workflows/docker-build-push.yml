name: Build, Security Checks, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest .
      - name: Save Docker image as tarball
        run: docker save ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest -o nginx-welcome.tar
      - uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: nginx-welcome.tar

  vulnerabilities-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - run: ./tmas_install.sh
      - run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      - name: Scan Docker image for Vulnerabilities + SBOM
        run: tmas scan docker-archive:nginx-welcome.tar -V --saveSBOM > vulnerability-scan-results.txt
      - name: Parse & fail if critical vulnerabilities
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.txt)
          echo "Critical vulnerabilities: $CRITICAL"
          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found! Failing pipeline..."
            exit 1
          fi
      - name: Upload vulnerability scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.txt
      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-report
          path: SBOM_*.json

  malware-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - run: ./tmas_install.sh
      - run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      - name: Scan Docker image for Malware
        run: tmas scan docker-archive:nginx-welcome.tar -M > malware-scan-results.txt
      - name: Parse & fail if malware found
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          CODE=$(jq '.malware.scanResult' malware-scan-results.txt)
          echo "Malware scan result code: $CODE"
          if [ "$CODE" -gt 0 ]; then
            echo "Malware detected! Failing pipeline..."
            exit 1
          fi
      - name: Upload malware scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: malware-scan-results
          path: malware-scan-results.txt

  secrets-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - run: ./tmas_install.sh
      - run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV
      - name: Scan Docker image for Secrets
        run: tmas scan docker-archive:nginx-welcome.tar -S > secrets-scan-results.txt
      - name: Parse & fail if secrets found
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.txt)
          echo "Secrets found: $COUNT"
          if [ "$COUNT" -gt 0 ]; then
            echo "Secrets detected! Failing pipeline..."
            exit 1
          fi
      - name: Upload secrets scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-results
          path: secrets-scan-results.txt

  push-image:
    needs:
      - vulnerabilities-scan
      - malware-scan
      - secrets-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - run: docker load --input nginx-welcome.tar
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker push ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest
