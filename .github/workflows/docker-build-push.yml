name: Build, Security Checks, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  #####################################################################
  # 1) BUILD JOB
  #####################################################################
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest .

      - name: Save Docker image as tarball
        run: |
          docker save ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest -o nginx-welcome.tar

      - name: Upload Docker image tarball
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: nginx-welcome.tar


  #####################################################################
  # 2) VULNERABILITY SCAN (no SBOM)
  #####################################################################
  vulnerabilities-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh

      - name: Set TMAS_API_KEY environment variable
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV

      # (a) Scan for vulnerabilities (without --saveSBOM)
      - name: Scan Docker image for Vulnerabilities
        run: tmas scan docker-archive:nginx-welcome.tar -V > vulnerability-scan-results.json

      # (b) Parse & fail if any critical vulnerabilities
      - name: Parse & fail if critical vulnerabilities
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          CRITICAL=$(jq '.vulnerabilities.criticalCount' vulnerability-scan-results.json)
          echo "Critical vulnerabilities: $CRITICAL"

          # If CRITICAL > 0, fail the job
          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found! Failing pipeline..."
            exit 1
          fi

      # (c) Always upload logs (even if fail)
      - name: Upload vulnerability scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: vulnerability-scan-results.json


  #####################################################################
  # 3) SBOM SCAN (separate job for SBOM generation)
  #####################################################################
  sbom-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh

      - name: Set TMAS_API_KEY environment variable
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV

      # Generate SBOM (we won't fail the pipeline if vulnerabilities appear here)
      - name: Generate SBOM
        run: tmas scan docker-archive:nginx-welcome.tar -V --saveSBOM > sbom-scan-results.json

      - name: Upload SBOM results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-scan-results
          path: sbom-scan-results.json

      - name: Upload SBOM file
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-report
          path: SBOM_*.json

  #####################################################################
  # 4) MALWARE SCAN
  #####################################################################
  malware-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh

      - name: Set TMAS_API_KEY environment variable
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV

      # (a) Run malware scan
      - name: Scan Docker image for Malware
        run: tmas scan docker-archive:nginx-welcome.tar -M > malware-scan-results.json

      # (b) Parse details & fail if any malware is found
      - name: Parse & fail if malware is found
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          MALWARE_CODE=$(jq '.malware.scanResult' malware-scan-results.json)
          echo "Malware scan result code: $MALWARE_CODE"

          if [ "$MALWARE_CODE" -gt 0 ]; then
            echo "=== MALWARE DETAILS ==="
            # Show top-level fileName & sub-fileName
            jq -r '
              .malware.findings[]? as $finding |
              $finding.foundMalwares[]? as $mal |
              "* Detected: \($mal.malwareName) in main file: \($finding.fileName) (sub-file: \($mal.fileName))"
            ' malware-scan-results.json

            echo "Malware detected! Failing pipeline..."
            exit 1
          fi

      # (c) Always upload logs
      - name: Upload malware scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: malware-scan-results
          path: malware-scan-results.json


  #####################################################################
  # 5) SECRETS SCAN
  #####################################################################
  secrets-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Install Artifact Scan CLI
        run: ./tmas_install.sh

      - name: Set TMAS_API_KEY environment variable
        run: echo "TMAS_API_KEY=${{ secrets.TMAS_API_KEY }}" >> $GITHUB_ENV

      # (a) Scan for secrets
      - name: Scan Docker image for Secrets
        run: tmas scan docker-archive:nginx-welcome.tar -S > secrets-scan-results.json

      # (b) Parse & fail if secrets found
      - name: Parse & fail if secrets found
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          SECRETS_COUNT=$(jq '.secrets.unmitigatedFindingsCount' secrets-scan-results.json)
          echo "Secrets found: $SECRETS_COUNT"

          echo "=== SECRET DETAILS ==="
          jq -r '
            .secrets.findings.unmitigated[]? |
            "* Rule: \(.ruleID) in file: \(.location.path) lines: \(.location.startLine)-\(.location.endLine)"
          ' secrets-scan-results.json

          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "Secrets detected! Failing pipeline..."
            exit 1
          fi

      # (c) Always upload logs
      - name: Upload secrets scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-results
          path: secrets-scan-results.json


  #####################################################################
  # 6) PUSH IMAGE
  #####################################################################
  push-image:
    # By default, only require vulnerabilities-scan, malware-scan, secrets-scan
    # (NOT sbom-scan). If you want to wait for sbom-scan to finish, add it below:
    needs:
      - vulnerabilities-scan
      - malware-scan
      - secrets-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load --input nginx-welcome.tar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nginx-welcome:latest
